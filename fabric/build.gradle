plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    // jade
    modImplementation "maven.modrinth:jade:${project.jade_version}+fabric"
    // wthit
    modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${wthit_version}"
    modRuntimeOnly "lol.bai:badpackets:fabric-${badpackets_version}"
    //configs
    modImplementation(include("folk.sisby:kaleido-config:${kaleido_version}"))
    modImplementation "maven.modrinth:mcqoy:adCKjC4q"
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}")
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    modImplementation("de.crafty:eiv-fabric:$eiv_version")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
